from django.contrib.auth.tokens import PasswordResetTokenGenerator
from adminSystem.models import AdminDeveloperUserModel
from django.utils.crypto import constant_time_compare
from django.utils.http import base36_to_int
from django.utils import timezone
from .models import *


class TokenGeneratorValidator(PasswordResetTokenGenerator):
     
    def _num_to_timestamp(self, num):
        """
        Converts a base36 encoded number to a timestamp.
        """
        try:
            return int(num, 36)
        except ValueError:
            raise ValueError("Invalid base36 encoded timestamp")
        
    def _make_hash_value(self, user, timestamp):
        return (
            str(user.pk) + str(timestamp) + str(user.is_active)
        )
    
    def check_token(self, user, token, duration, special):
        try:
            get_token_from_database= TokensModel.objects.get(token= token)
            expiration_time= timezone.now() - timezone.timedelta(minutes= int(duration))
            if get_token_from_database is not None and get_token_from_database.user_id == user.id: #checking if token exist and also if token was generated by the current user
                if get_token_from_database.timestamp > expiration_time: #checking if it still valid
                    if get_token_from_database.refCode != '':
                        if special == 1:
                            try:
                                refUser= AdminDeveloperUserModel.objects.get(referral_code= get_token_from_database.refCode)
                            except (AdminDeveloperUserModel.DoesNotExist):
                                refUser= None
                        else:
                            try:
                                refUser= CustomUserModel.objects.get(referral_code= get_token_from_database.refCode)
                            except (CustomUserModel.DoesNotExist):
                                refUser= None
                        if refUser != None:
                            if not refUser.referral_code_expired:
                                user.referred_by= get_token_from_database.refCode
                                if refUser.non_pro_referrals == '':
                                    refUser.non_pro_referrals += str(user.username)
                                else:
                                    refUser.non_pro_referrals += ',' + str(user.username)
                                send_message= Notifications.objects.create(user= refUser, notificationType="Referral", notification= f'{user.username} joined using your referral link. You will recieve a commission when {user.username} becomes a premium user')
                                send_message.save()
                                refUser.save()
                                print('Link has expired')
                        else:
                            print('No ref')
                    user.save()
                    return True
                else:
                    get_token_from_database.delete() # deleting token if it has expired
                    return False
            else:
                return False
        except (TypeError, ValueError, OverflowError, TokensModel.DoesNotExist):
            return False
        
 
    
# Create an instance of the custom token generator Validator
TokenGeneratorValidator = TokenGeneratorValidator()
